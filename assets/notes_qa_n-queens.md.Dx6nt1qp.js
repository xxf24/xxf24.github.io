const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/index.BiDtii-w.js","assets/chunks/framework.D5y5L8WJ.js"])))=>i.map(i=>d[i]);
import{_ as t,a as o,aa as a,R as l,f as n,o as i,ab as s}from"./chunks/framework.D5y5L8WJ.js";const b=JSON.parse('{"title":"八皇后问题","description":"","frontmatter":{"lastUpdateTime":"2024-11-28T01:25:55.000Z","date":"2023/2/26","title":"八皇后问题","category":"问答","tags":["算法","小游戏"]},"headers":[],"relativePath":"notes/qa/n-queens.md","filePath":"notes/qa/n-queens.md"}'),p={name:"notes/qa/n-queens.md"};function h(u,e,d,c,m,f){const r=n("DemoWrapper");return i(),o("div",null,[e[0]||(e[0]=a('<div class="warning custom-block github-alert"><p class="custom-block-title">🤔</p><p></p><p>如何能够在 8×8 的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后？</p><p>即要求任两个皇后都不能处于同一条横行、纵行或对角线上。</p></div><h2 id="问题说明" tabindex="-1">问题说明 <a class="header-anchor" href="#问题说明" aria-label="Permalink to &quot;问题说明&quot;">​</a></h2><p>这个问题可以细分成以下三个问题：</p><ol><li>找到任意一种具体摆法</li><li>找到总共有多少种摆法</li><li>找到所有具体摆法</li></ol><p>借助计算机，我们直接用“暴力”穷举的方式也可以很快的解决这几个问题，但是当问题扩展成要求在 N × N 的棋盘上成功放置 N 个皇后时，又该如何求解呢？</p><p>根据我在网上查找到的资料：</p><p>对于问题 1，我们可以通过构造公式快速得到可行的摆法；</p><p>对于问题 2，目前似乎没有精确的求解公式。在 <a href="https://oeis.org/A000170" target="_blank" rel="noreferrer">OEIS 数列 A000170</a> 上能看到目前算到的最大 N 是 27，此时可行解的数量级已达到了 10<sup>17</sup>，最近的更新是 2021 年 10 月由 Michael Simkin 发布的 <a href="https://arxiv.org/abs/2107.13460" target="_blank" rel="noreferrer">论文</a>，证明当 N 足够大时，大约有 (0.143 * n)<sup>n</sup> 种摆法。</p><p>不过上述求解过程都过于抽象（我看不懂），本文的目的是分享当 N 不超过 15 时，如何逐步优化回溯算法来求解问题 3，同时设计了一个用于演示所有摆法的小组件。</p><h2 id="摆法演示" tabindex="-1">摆法演示 <a class="header-anchor" href="#摆法演示" aria-label="Permalink to &quot;摆法演示&quot;">​</a></h2>',10)),l(r,{loader:()=>s(()=>import("./chunks/index.BiDtii-w.js"),__vite__mapDeps([0,1])),center:!1}),e[1]||(e[1]=a('<h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle" target="_blank" rel="noreferrer">Eight_queens_puzzle | 维基百科</a></li><li><a href="https://leetcode.cn/problems/n-queens/solution/" target="_blank" rel="noreferrer">51. N 皇后 | 力扣</a></li><li><a href="https://github.com/MaigoAkisame/Queens" target="_blank" rel="noreferrer">八皇后 + 位运算 | GitHub</a></li><li><a href="https://exp-blog.com/algorithm/n-huang-hou-wen-ti/" target="_blank" rel="noreferrer">N 皇后问题 – 构造法原理与证明</a></li></ul>',3))])}const g=t(p,[["render",h]]);export{b as __pageData,g as default};
